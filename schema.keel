model Itinerary {
    fields {
        // Choose your location, number of days for the trip, what activities you want to plan 
        numberOfDays Number
        // Save location info from skyscanner response so we can use it to query flights
        location LocationInfo?
        activityTypes ActivityType[]
        // see? 
        // do?
        // eat?
        // stay?
        notes Text?
        pdf Text?
    }

    actions {
        create createItinerary() with (numberOfDays, activityTypes, location.entityId, location.iataCode, location.name, location.countryId, location.countryName, location.cityName, location.location, location.hierarchy, location.type)
        // set location on itinerary to get flight info later
        update setLocation(id) with (location.id)
        // remove location row and delete from locationInfo table
        write unsetLocation(id) returns (UnsetLocationRes) {
            // @set(itinerary.location = null)
            @function
        }
        update updateItineraryNotes(id) with (notes)
        update savePdf(id) with (pdf)
    }

    @on([update], sendPdf)

    @permission(
        actions: [get, list, update, delete, create],
        expression: true 
    )
}

message UnsetLocationRes {}

enum ActivityType {
    See
    Do
    Eat
    Stay
}

// job UpdateCheapestFlightsAnywhere {
//     @schedule("15 12 * * ? *")
//     @permission(expression: true)
// }

model Destination {
    fields {
        entityId Text
        name Text
    }

    actions {
        read autoSuggestDestinations(DestinationQuery) returns (AutoSuggestResponse) {
            @permission(expression: true)
            @function
        }
    }
}

message DestinationQuery {
   destination Text
}

message AutoSuggestResponse {
  places Place[]
}

message Place {
    entityId Text
    iataCode Text
    name Text
    countryId Text
    countryName Text
    cityName Text
    location Text
    hierarchy Text
    type Text
}

model LocationInfo {
    fields {
        entityId Text
        iataCode Text
        name Text
        countryId Text
        countryName Text
        cityName Text
        location Text
        hierarchy Text
        type Text
    }

    actions {
        create saveLocationInfo() with (entityId, iataCode, name, countryId, countryName, cityName, location, hierarchy, type)
    }
}

model CheapestFlightsAnywhere {
    fields {
        origin Text
        destination Text
        cost Number
    }

    actions {
        list allFlights()
    }

    @permission(
        actions: [get, list, update, delete],
        expression: true 
    )
}



model Activity {
    fields {
        title Text
        type ActivityType
        details Text?
        placeId Text? 
    }
}

api Api {
    models {
        CheapestFlightsAnywhere
        Itinerary
        Activity
        Destination
        LocationInfo
    }
}
